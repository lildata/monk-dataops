namespace: /spark-streaming

zookeeper:
  defines: runnable
  containers:
    defines: containers
    zookeeper:
      image: wurstmeister/zookeeper:latest 
      ports:
        - <- `0.0.0.0:${zookeeper-port}:2181`
      environment:
        - <- `ZOOKEEPER_CLIENT_PORT=${zookeeper-port}`
        - ALLOW_PLAINTEXT_LISTENER=yes
        - ALLOW_ANONYMOUS_LOGIN=yes
      paths: 
        - <- `${volume_local}:${volume_container}`
  variables:
    defines: variables
    zookeeper-port:
      type: int
      value: 2181
    volume_local:
      type: string
      value: <- `${moncc-volume-path}/zookeeper`
    volume_container:
      type: string
      value: "/opt/zookeeper-3.4.13/data"

kafka1:
  defines: runnable
  containers:
    defines: containers
    kafka1:
      image: docker.io/whitenoi5/stream-kafka:latest 
      ports:
        - <- `0.0.0.0:${broker-port}:${broker-port}`
      environment:
        - <- `KAFKA_ADVERTISED_HOST_NAME=${broker-internal-port}`
        - <- `KAFKA_ZOOKEEPER_CONNECT=${zookeeper-host-name}:${zookeeper-port}`
        - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        - <- `KAFKA_LISTENERS=PLAINTEXT://:${broker-internal-port},PLAINTEXT_HOST://:${broker-port}`
        - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
        - <- `KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${broker-internal-host-name}:${broker-internal-port},PLAINTEXT_HOST://localhost:${broker-port}`
        - <- `KAFKA_JMX_OPTS=${opts}`
      paths:
        - <- `${volume_local}:${volume_container}`
      bash: <- `start-kafka.sh`
  variables:
    defines: variables
    broker-port:
      type: int
      value: 9092
    broker-internal-host-name:
      type: string
      value: <- get-hostname("spark-streaming/kafka1", "kafka1")
    broker-internal-port:
      type: int
      value: 29092
    zookeeper-host-name:
      type: string
      value: <- get-hostname("spark-streaming/zookeeper", "zookeeper")
    zookeeper-port:
      type: int
      value: 2181
    volume_local:
      type: string
      value: <- `${moncc-volume-path}/kafka1`
    volume_container:
      type: string
      value: "/opt/kafka_2.12-2.2.0/logs"
    port:
      type: string
      value: 2181
    opts:
      type: string
      value: "-javaagent:/prometheus/jmx_prometheus_javaagent-0.3.1.jar=8080:/prometheus/kafka-0-8-2.yml"

kafka2:
  defines: runnable
  containers:
    defines: containers
    kafka2:
      image: docker.io/whitenoi5/stream-kafka:latest 
      ports:
        - <- `0.0.0.0:${broker-port}:${broker-port}`
      bash: <- `start-kafka.sh`
      environment:
        - <- `KAFKA_ADVERTISED_HOST_NAME=${broker-internal-port}`
        - <- `KAFKA_ZOOKEEPER_CONNECT=${zookeeper-host-name}:${zookeeper-port}`
        - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
        - <- `KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${broker-internal-host-name}:${broker-internal-port},PLAINTEXT_HOST://localhost:${broker-port}`
        - <- `KAFKA_LISTENERS=PLAINTEXT://:${broker-internal-port},PLAINTEXT_HOST://:${broker-port}`
        - <- `KAFKA_JMX_OPTS=${opts}`
      paths:
        - <- `${volume_local}:${volume_container}`
  variables:
    defines: variables
    broker-port:
      type: int
      value: 9093
    broker-internal-host-name:
      type: string
      value: <- get-hostname("spark-streaming/kafka2", "kafka2")
    broker-internal-port:
      type: int
      value: 29093
    zookeeper-host-name:
      type: string
      value: <- get-hostname("spark-streaming/zookeeper", "zookeeper")
    zookeeper-port:
      type: int
      value: 2181
    volume_local:
      type: string
      value: <- `${moncc-volume-path}/kafka2`
    volume_container:
      type: string
      value: "/opt/kafka_2.12-2.2.0/logs"
    port:
      type: string
      value: 2181
    opts:
      type: string
      value: "-javaagent:/prometheus/jmx_prometheus_javaagent-0.3.1.jar=8080:/prometheus/kafka-0-8-2.yml"

kafka-manager:
  defines: runnable
  containers:
    defines: containers
    kafka-manager:
      image: hlebalbau/kafka-manager:1.3.3.18
      ports:
        - <- `0.0.0.0:${kafka_local}:${kafka_container}`
      environment:
        - <- `ZK_HOSTS=${zookeeper-hostname}:${port}`
        - <- `APPLICATION_SECRET=${secret}`
  variables:
    defines: variables
    kafka_local:
      type: string
      value: 9000
    kafka_container:
      type: string
      value: 9000
    zookeeper-hostname:
      type: string
      value: <- get-hostname("spark-streaming/zookeeper", "zookeeper")
    port:
      type: string
      value: 2181
    secret: 
      type: string
      value: "random-secret"

spark-master:
  defines: runnable
  inherits: /apache-spark/common
  containers:
    spark:
      ports:
        - <- `0.0.0.0:${spark-ui-port}:${spark-ui-port}`
        - <- `0.0.0.0:${spark-port}:${spark-port}`
  variables:
    spark-ui-port: 8080
    spark-mode: master
    spark-master-host: <- get-hostname("spark-streaming/spark-master", "spark")

spark-worker-1:
  defines: runnable
  inherits: /apache-spark/common
  variables:
    spark-ui-port: 8081
    spark-mode: worker
    spark-master-host: <- get-hostname("spark-streaming/spark-master", "spark")

spark-worker-2:
  defines: runnable
  inherits: /apache-spark/common
  variables:
    spark-ui-port: 8082
    spark-mode: worker
    spark-master-host: <- get-hostname("spark-streaming/spark-master", "spark")
    
prometheus:
  defines: runnable
  containers:
    defines: containers
    prometheus:
      image: docker.io/whitenoi5/stream-prometheus:latest
      ports:
        - <- `0.0.0.0:${prom_local}:${prom_container}`
  variables:
    defines: variables
    prom_local:
      type: string
      value: 9090
    prom_container:
      type: string
      value: 9090

grafana:
  defines: runnable
  containers:
    defines: containers
    grafana:
      image: docker.io/whitenoi5/stream-grafana:latest
      ports:
        - <- `0.0.0.0:${graf_local}:${graf_container}`
      environment:
        - <- `GF_SECURITY_ADMIN_PASSWORD=${password}`
  variables:
    defines: variables
    graf_local:
      type: string
      value: 3000
    graf_container:
      type: string
      value: 3000
    password:
      type: string
      value: password

zeppelin:
  defines: runnable
  containers:
    defines: containers
    zeppelin:
      image: docker.io/whitenoi5/stream-zeppelin:latest
      ports:
        - <- `0.0.0.0:${zepp_local}:${zepp_container}`
        - <- `0.0.0.0:${zepp_local2}:${zepp_container2}`
        - <- `0.0.0.0:${zepp_local3}:${zepp_container2}`
  variables:
    defines: variables
    zepp_local:
      type: string
      value: 8080
    zepp_container:
      type: string
      value: 8080
    zepp_local2:
      type: string
      value: 8443
    zepp_container2:
      type: string
      value: 8443
    zepp_local3:
      type: string
      value: 4040
    zepp_container3:
      type: string
      value: 4040

stack:
    defines: process-group
    runnable-list:
        - /spark-streaming/zookeeper
        - /spark-streaming/kafka1
        - /spark-streaming/kafka2
        - /spark-streaming/spark-master
        - /spark-streaming/spark-worker-1
        - /spark-streaming/kafka-manager
        - /spark-streaming/prometheus
        - /spark-streaming/grafana
        - /spark-streaming/zeppelin
